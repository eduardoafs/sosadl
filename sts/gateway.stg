/*
This is a attempt to translate the behavior of the WsnGateway sample written in SoSADL into NTIF
following rules detailed in translation.pdf.

WARNING: This NTIF is not complete, and has been writen manually (i.e. not automatically generated).
*/ 

/*
// This is the behavior to be translated into an STS.

with Base
with Localization

library WsnGateway is {
  system Gateway(lps: Coordinate) is {
  	
  datatype Abscissa
  datatype Ordinate
  datatype Coordinate is tuple{x:Abscissa,y:Ordinate}
  datatype Depth
  datatype Measure is tuple{coordinate:Coordinate,depth:Depth}

  // ...

  behavior serving() is {
    	value localbase is sequence{MeasureData} = sequence{}
    	repeat {
      	  choose {
      		via notification::measure receive measure
      		do localbase::append(measure)
      	  } or {
      	   	via request::coordinate receive query
      		via request::depth send localbase::select{measure suchthat measure::coordinate=query}::map{x to x::depth}
      	  }
    	}
    }
}
*/

system Serving

gate
  notification::measure(Measure);
  request::coordinate(Coordinate);
  request::depth(?); // todo!

process Serving

input
  notification::measure,
  request::coordinate;

output
  request::depth;

internal
  tau;

parameters
  // aucun

variables
  localbase : array[1000] of MeasureData; //sequence{MeasureData}

state

  init : s1;
  s2;
  s3;
  s4;
  s5;
  s6;
  s7;
  s8;

transition

  from s1   // valuing
    sync tau;
    do localbase=array()  // sequence{} // TODO: definir un array vide ?
  to s2;  
  
  from s2  // choose
    sync tau;
  to s3;

  from s2 // choose
    sync tau;
  to s5;

  from s3  // case 1 de choose
    sync notification::measure?(measure);
  to s4;

  from s5  // case 2 de choose
    sync request::coordinate?(query)
  to s6;

  from s7  // case 2 de choose (suite)
    if (p=localbase::select{measure suchthat measure::coordinate=query}::map{x to x::depth})
      sync request::depth!(p)
  to s8;

  from s4  // repeat a partir du case 1
    sync tau;
  to s1;

  from s6  // case 2 : concatenation entre receive et send
    sync tau;
  to s7;

  from s8  // repeat a partir du case 2
    sync tau;
  to s1;


// commandes possibles

s := getstg(Serving);
show(s);

