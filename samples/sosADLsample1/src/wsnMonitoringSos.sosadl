with Base
with Localization

with WsnSensor
with WsnGateway
with WsnMediator

// Description of WsnMonitoring as an Architecture Abstraction
sos WsnMonitoringSos is {
  architecture WnsMonitoringSosArchitecture() is {
  
    datatype Abscissa
    datatype Ordinate
    datatype Coordinate is tuple{x:Abscissa,y:Ordinate}
  
    gate warning is {
      connection alert is out{MeasureData}  // alert sent to its environment
    } guarantee {
      protocol alertpact is
      	forever {
          repeat {anyaction}
          repeat {via warning::alert send any}
        }
    }
    
    gate request is {
      connection coordinate is in{Coordinate}
      connection depth is out{Depth}
    } guarantee {
      protocol requestpact is
      	forever {  // in the case of one statement '{' '}' are not needed
          via request::coordinate receive any
          repeat {anyaction}
          via request::depth send any
        }
    }
    
    behavior coalition() is compose {
        sensors is sequence{Sensor()}  // ERREUR! recognized as:  sensors is sequence{Sensor}
  	    gateway is Gateway()           // ERREUR! recognized as:  gateway is Gateway
        transmitters is sequence{Transmitter()} // ERREUR! recognized as: transmitters is sequence{Transmitter}
      } binding {
        relay warning::alert to gateway::notification::alert
        and relay request::coordinate to gateway::request::coordinate
        and relay request::depth to gateway::request::depth
        and forall{itransmitter in transmitters, isensor1 in sensors, isensor2 in sensors, igateway in gateway suchthat
          (isensor1 <> isensor2) implies (
          	// multiplicities are 'one', 'none', 'lone' (none or one), 'any' (none or more), 'some' (one or more), 'all'
            unify one{itransmitter::fromSensors} to one{isensor1::measurement::measure} 
            and unify one{itransmitter::toGateway} to one{isensor2::measurement::pass}
              xor unify one{itransmitter::toGateway} to one{igateway::notification::measure}
            )
        }
      }
  }
}