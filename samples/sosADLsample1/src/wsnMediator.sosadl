with Base
with Localization

// Description of Transmitter as a Mediator Abstraction
library WsnMediator is {
  
  /* Bug fix: previously, datatype Coordinate was not explicited, which meant implicitly an Integer.
   * But onecoordinate and othercoordinate in the distance function could not be Integers...
   * Thus the fix. 
   * Furthermore, in Transmitter, type Coordinate is redeclared as tuple{x:Abscissa,y:Ordinate}.
   */ 
  datatype Coordinate is tuple{x:Abscissa,y:Ordinate} {
    function (onecoordinate:Coordinate)::distance(othercoordinate:Coordinate):Distance is {
      return sqrt(sqr(onecoordinate::x-othercoordinate::x)+sqr(onecoordinate::y-othercoordinate::y))
    }
  }
 
  mediator Transmitter(distancebetweengates:Distance) is {
  	datatype Abscissa
    datatype Ordinate
    datatype Coordinate is tuple{x:Abscissa,y:Ordinate}
    datatype Depth
    datatype MeasureData is tuple{coordinate:Coordinate,depth:Depth}
  	
  	duty transmit is {
      connection fromSensors is in{MeasureData}  // measure received from a sensor
      connection towardsGateway is out{MeasureData}  // measure sent towards the gateway
    } require {
      property inrange is {
      	value sender = sender(transmit::fromSensors) // type is inferred
        value receiver = receiver(distance::towardsGateway) // type is inferred
        within
        // the distance between the sender and the receiver must be smaller than the parameter of the mediator
        sender::coordinate::distance(receiver::coordinate) < distancebetweengates   // 'value', 'sender' and 'receiver' are introspections on connection
      }
    } assume {
      protocol transmitpact is {
      	repeat {
          via transmit::fromSensors receive measure
          via transmit::towardsGateway send measure
        }
      }
    }
  
  	behavior transmitting(distancebetweengates:Distance) is {
      repeat {
        via transmit::fromSensors receive measure
    	  via transmit::towardsGateway send measure
      }
    }
  }
}